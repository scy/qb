qb :: quick blogging
====================

qb is a blog system for users who:
 - don't want to install a database server for blogging every two months
 - prefer performance over object-oriented plugin-based portal code
 - like to be able to send entries via SCP

The default configuration files are those of scytale.de. That means two things:
First, you'll want to change it. Second, you'll have some nice examples.

Questions please to scy-dev-qb@scytale.de or contact me via IRC, I'm Scytale
at freenode and usually hang out in #c3ma. Another possibility is to talk to me
via Jabber at scy@scytale.de.


SYSTEM REQUIREMENTS
===================

 - PHP 5
 - Apache Web Server (others not tested)
 - Unix-based OS (others not tested)

Please contact me if you managed to run qb on something "not tested".


INSTALLATION
============

Copy all files into a directory in the Document Root of your webserver. You can
use a subdirectory or the top directory. You may want to move the "htaccess"
file to ".htaccess" or create a symlink to it.

Copy qb.distcfg.php to qb.cfg.php and edit it according to your needs.

You may wish to create your own templates (find them in src/) and CSS. The
templates to use are linked in qb.cfg.php, the CSS in the template.

Make sure your web server can write to the QB_META directory.

Start putting files with your configured suffix (default: .qb) into the "src"
directory.


CONTENT FILE SYNTAX
===================

Each content file consists of a header (the first line) and a body (everything
else). The header consists of several tags formatted like "<NAME:VALUE>", where
NAME will be the name of a template variable and VALUE its value.

There are some special things: If you don't supply a NAME, it's the same as
setting it to "title", therefore you can supply the entry's title like
<:My cool entry> or <title:My cool entry>, it's equivalent.

Then there's the <tags:> tag where you can supply some tags for the entry.
Those are available in the template via "spantags" and "ultags", depending on
whether you like <span class="tag"> or <ul class="tags"><li>... more. Soon one
will be able to search for certain tags as well. Specify the tags as in Flickr,
ie. seperate them with spaces and put double quotes around multi-word tags:
<tags:example documentation boring "all your tags are belong to us" omg>

Last but not least there's the <via:> tag where you can place a link to another
blog to cite as source: <via:<<http://example.com/blog/23-foo.html ExBlog>>>
(See below for the default "link" syntax.) You can also put unlinked text in it:
<via:Fefe's Blog>. There'll probably be a trackback function soon.

You can add other tags if you want to, their values will be available in the
templates like any other ones.

The body contains HTML code plus some regex shortcuts. With the default config
you can write things like <<http://example.com/link Description>> which will
then translate to <a href="http://example.com/link">Description</a>. There's
other stuff like <wXX:Lemma_with_underscores Description> which will link to
http://XX.wikipedia.org/Lemma_with_underscores.


URL SCHEMA
==========

Suppose you've installed qb in a subdirectory called "qb" on your web server
scytale.de and you've activated the supplied .htaccess file. Now every request
that starts with http://scytale.de/qb/ will be handled by qb.

qb will map the path on the web server to its "source" directory (by default
"src"). That means, if someone sends a request to http://scytale.de/qb/foo, qb
will search first for a directory "src/foo". If it exists, it will display all
".qb" files in that directory and its subdirectories, ordered by their creation
date, newest first. This allows you to organize your files in a flexible way.
For example, you can throw all your blog entries directly in the source
directory (creative chaos), put them under different directories depending on
the content (like "coding", "politics" etc.) or in date-based directories (like
"2007/05/30"). In the last example, someone requesting http://scytale.de/qb/2007
will see all your entries in the "2007" directory and its subdirectories.

If there's no directory with that name, qb will look for a ".qb" file matching.
For example, the request "http://scytale.de/qb/foo" will look for "src/foo.qb".
If that doesn't exist also, an "not found" error message will be sent.

There are two other special things that may be passed as "query" part of the
URL, i.e. after a question mark. First, you can pass a template name. This is
how the Atom feed works: You pass "http://scytale.de/qb/?atom10" in the URL, and
qb will use the "qb.article.atom10" and "qb.template.atom10" template files in
its source directory, which will output a valid Atom feed instead of HTML data.

Second, if the query part is a positive integer, it will be interpreted as page
number. http://scytale.de/qb/?3 will therefore refer to page three of the
articles. Page numbers are used if the number of articles that would match a
certain request is larger than the maximum number of articles per page set in
the config file.


META INFORMATION
================

Since most current Unix systems do not store file creation times (only the
modification time), qb uses a dirty workaround that can be seen in the "meta"
directory of a qb installation. In this directory there are ".cre" files stored
for each ".qb" file in the source directory. Their modification time is used as
creation time of the source files. That means that for each ".qb" file
displayed, qb will check whether its ".cre" file exists. If it doesn't, it is
created and its modification time set to that of the ".qb" file. This timestamp
is never changed, in contrast to that of the ".qb" file when you change it.

The meta directory needs to be writable by the web server for obvious reasons
(on a side note, the source directory needs not). It will contain the same
subdirectories as the source directory. If you delete or move around files in
the source directory, orphaned files will not be automatically deleted or moved
to the same location.


BACKING UP AND MOVING A QB INSTALLATION
=======================================

Since qb is only using plain text files, it's easy to create a backup. You don't
have to create database dumps and all that. The only thing you'll have to take
care for is to keep the correct time stamps.

If you would like to move a qb installation to a different directory or web
server, here are some common pitfalls:

 o Make sure the modification timestamps of your files in the source and meta
   directory will not be changed. Else you'll lose the timestamp information,
   and article order will be seriously screwed up.

 o Check the permissions of your meta directory. The web server needs to be able
   to create new files and directories there.

 o Don't forget the .htaccess file and to check your config file whether they
   are up to date.
